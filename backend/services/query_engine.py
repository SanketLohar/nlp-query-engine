# backend/services/query_engine.py

import os
import json
import google.generativeai as genai # <-- Changed import
from sqlalchemy import create_engine, text

class QueryEngine:
    def __init__(self):
        self.db_engine = create_engine(os.getenv("DATABASE_URL"))
        # --- Configure the Gemini client ---
        genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
        self.model = genai.GenerativeModel('gemini-2.5-pro')
        # ------------------------------------

    def execute_sql_query(self, sql_query: str):
     try:
        with self.db_engine.connect() as connection:
            result = connection.execute(text(sql_query))
            column_names = result.keys()
            results_as_dicts = [dict(zip(column_names, row)) for row in result.fetchall()]
            if not results_as_dicts:
                return {"message": "Query executed successfully, but returned no results."}
            return results_as_dicts
     except Exception as e:
        # This will catch errors from bad SQL generated by the AI
        return {"error": f"An error occurred while executing the SQL: {str(e)}", "invalid_sql": sql_query}
    
    def text_to_sql(self, user_query: str, schema: dict) -> str:
        """
        Uses Gemini to convert a natural language query into a SQL query
        based on the provided database schema.
        """
        schema_json_string = json.dumps(schema, indent=2)
        
        # --- Create a single prompt for Gemini ---
        prompt = f"""
        You are an expert PostgreSQL assistant. Your task is to convert a user's natural language question into a valid PostgreSQL query.
        You will be given a JSON object representing the database schema and a question from the user.
        Use the provided schema to ensure the generated SQL query is correct and uses the actual table and column names.
        
        Database Schema:
        {schema_json_string}
        
        User Question: "{user_query}"
        
        Only output the raw SQL query. Do not include any explanations, comments, or markdown formatting like ```sql.
        """
        # ----------------------------------------
        
        # --- Call the Gemini API ---
        response = self.model.generate_content(prompt)
        # ---------------------------
        
        # --- Extract and clean the SQL query ---
        sql_query = response.text.strip()
        if sql_query.lower().startswith("```sql"):
            sql_query = sql_query[5:]
        if sql_query.endswith("```"):
            sql_query = sql_query[:-3]
        return sql_query.strip()
        # ---------------------------------------